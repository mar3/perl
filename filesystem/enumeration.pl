#!/usr/bin/perl
# coding: utf-8
#
#
# ファイル列挙
#
#
#
#
#
#
#

use strict;
use File::Spec::Functions;






###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
package out;

# sub new {}

sub println {

	print(@_, "\n");
}









###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
###############################################################################
package main;

# sub new {}

sub _find_file {

	my ($path, $handler) = @_;



	if(-f $path) {
		return $handler->($path);
	}
	elsif(-d $path) {
		my $handle;
		if(!opendir($handle, $path)) {
			out::println('[error] cannot open directory. path=[', $path, ']');
			return 1;
		}
		my $state = 1;
		while(my $name = readdir($handle)) {
			if($name eq '.') {
				next;
			}
			if($name eq '..') {
				next;
			}
			$state = _find_file(File::Spec::Functions::catfile($path, $name), $handler);
			if(!$state) {
				last;
			}
		}
		closedir($handle);
		return $state;
	}
	else {
		out::println('[error] unknown device. path=[', $path, ']');
		return 1;
	}
}

sub _file_handler {

	my ($path) = @_;



	out::println('DETECTED: path=[', $path, ']');
}

sub _main {

	my ($path) = @_;



	_find_file($path, \&_file_handler);
}

_main(@ARGV);
